from tkinter import *
import tkinter.filedialog
from tkinter import messagebox
from PIL import ImageTk, Image
from io import BytesIO
import os
import numpy as np
from scipy.io import wavfile
from audio import AudioCrypt
from keyPass import key,password

class EncProj:
    output_image_size = 0

    # - main frame or start page
    def main(self, root):
        root.title('Multimedia Encryption')
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        window_width = 600
        window_height = 600
        x_coordinate = (screen_width - window_width) // 2
        y_coordinate = (screen_height - window_height) // 2
        root.geometry(f'{window_width}x{window_height}+{x_coordinate}+{y_coordinate}')
        root.resizable(width=False, height=False)
        root.config(bg='#e3f4f1')
        frame = Frame(root)
        frame.grid()

        title = Label(frame, text='Multimedia Security')
        title.config(font=('Times new roman', 23, 'bold'))
        title.grid(pady=10)
        title.config(bg='#e3f4f1')
        title.grid(row=1)

        #image steganography
        encode = Button(frame, text="Encode", command=lambda: self.encode_frame1(frame), padx=14, bg='#e3f4f1')
        encode.config(font=('Helvetica', 14), bg='#e8c1c7')
        encode.grid(row=2)

        decode = Button(frame, text="Decode", command=lambda: self.decode_frame1(frame), padx=14, bg='#e3f4f1')
        decode.config(font=('Helvetica', 14), bg='#e8c1c7')
        decode.grid(pady=12, row=3)

        #encrypt image
        encryptImage = Button(frame, text="encryptImage", command=lambda: self.encryptImage_frame1(frame), padx=14, bg='#e3f4f1')
        encryptImage.config(font=('Helvetica', 14), bg='#e8c1c7')
        encryptImage.grid(row=4)

        decryptImage = Button(frame, text="decryptImage", command=lambda: self.decryptImage_frame1(frame), padx=14, bg='#e3f4f1')
        decryptImage.config(font=('Helvetica', 14), bg='#e8c1c7')
        decryptImage.grid(pady=12, row=5)


        #encrypt audio
        encryptAudio = Button(frame, text="encryptAudio", command=lambda: self.encryptAudio_frame1(frame), padx=14, bg='#e3f4f1')
        encryptAudio.config(font=('Helvetica', 14), bg='#e8c1c7')
        encryptAudio.grid(row=6)

        decryptAudio = Button(frame, text="decryptAudio", command=lambda: self.decryptAudio_frame1(frame), padx=14, bg='#e3f4f1')
        decryptAudio.config(font=('Helvetica', 14), bg='#e8c1c7')
        decryptAudio.grid(pady=12, row=7)

        encryptFile = Button(frame, text="encryptFile", command=lambda: self.encryptFile(frame), padx=14, bg='#e3f4f1')
        encryptFile.config(font=('Helvetica', 14), bg='#e8c1c7')
        encryptFile.grid(row=8)

        decryptFile = Button(frame, text="decryptFile", command=lambda: self.decryptFile(frame), padx=14, bg='#e3f4f1')
        decryptFile.config(font=('Helvetica', 14), bg='#e8c1c7')
        decryptFile.grid(pady=12, row=9)

        root.grid_rowconfigure(1, weight=1)
        root.grid_columnconfigure(0, weight=1)


    #- back function to loop back to main screen
    def back(self,frame):
        frame.destroy()
        self.main(root)


    def encryptFile(self, F):
        F.destroy()
        myfile = tkinter.filedialog.askopenfilename(filetypes=[('All Files', '*.*')])
        if not myfile:
            messagebox.showerror("Error", "You have selected nothing!")
        else:
            encrypted_filename = tkinter.filedialog.asksaveasfilename(defaultextension=".enc")
            if not encrypted_filename:
                messagebox.showerror("Error", "You have not provided a filename for the encrypted file!")
            else:

                with open(myfile, 'rb') as file:
                    file_data = file.read()

                encrypted_data = self.xor_encrypt(file_data, password)

                with open(encrypted_filename, 'wb') as file:
                    file.write(encrypted_data)

                messagebox.showinfo("Success", "Encryption Successful\nEncrypted file is saved as {}".format(encrypted_filename))

    def xor_encrypt(self, data, password):
        encrypted_data = bytearray()
        password_length = len(password)

        for i, byte in enumerate(data):
            encrypted_byte = byte ^ ord(password[i % password_length])
            encrypted_data.append(encrypted_byte)

        return encrypted_data

    def decryptFile(self, F):
        F.destroy()
        myfile = tkinter.filedialog.askopenfilename(filetypes=[('All Files', '*.*')])
        if not myfile:
            messagebox.showerror("Error", "You have selected nothing!")
        else:
            decrypted_filename = tkinter.filedialog.asksaveasfilename(defaultextension=".dec")
            if not decrypted_filename:
                messagebox.showerror("Error", "You have not provided a filename for the decrypted file!")
            else:

                with open(myfile, 'rb') as file:
                    file_data = file.read()

                decrypted_data = self.xor_decrypt(file_data, password)

                with open(decrypted_filename, 'wb') as file:
                    file.write(decrypted_data)

                messagebox.showinfo("Success", "Decryption Successful\nDecrypted file is saved as {}".format(decrypted_filename))

    def xor_decrypt(self, data, password):
        decrypted_data = bytearray()
        password_length = len(password)

        for i, byte in enumerate(data):
            decrypted_byte = byte ^ ord(password[i % password_length])
            decrypted_data.append(decrypted_byte)

        return decrypted_data




    def encryptImage_frame1(self, F):
        F.destroy()
        ie_F2 = Frame(root)
        label1 = Label(ie_F2, text='Select the Image for encryption:')
        label1.config(font=('Times new roman', 25, 'bold'), bg='#e3f4f1')
        label1.grid()

        button_bws = Button(ie_F2, text='Select', command=lambda: [self.encryptImage(ie_F2),EncProj.back(self,ie_F2)])
        button_bws.config(font=('Helvetica', 18), bg='#e8c1c7')
        button_bws.grid()
        button_back = Button(ie_F2, text='Cancel', command=lambda: self.back(ie_F2))
        button_back.config(font=('Helvetica', 18), bg='#e8c1c7')
        button_back.grid(pady=15)
        button_back.grid()
        ie_F2.grid()
    
    def encryptImage(self, F):
        F.destroy()
        myfile = tkinter.filedialog.askopenfilename(filetypes=[('png', '*.png'), ('jpeg', '*.jpeg'), ('jpg', '*.jpg'), ('All Files', '*.*')])
        if not myfile:
            messagebox.showerror("Error", "You have selected nothing!")
        else:
            my_img = Image.open(myfile)
            encrypted_img = self.encryptImageFunc(my_img)
            encrypted_img.show()
            encrypted_img.save(tkinter.filedialog.asksaveasfilename(filetypes=[('png', '*.png')], defaultextension=".png"))
            messagebox.showinfo("Success", "Encryption Successful\nEncrypted image is saved as encrypted_image.png in the same directory")

    def encryptImageFunc(self, image):
        img = np.array(image)
        rows, cols, _ = img.shape
        encrypted_img = np.zeros((rows, cols, 3), dtype=int)

        for i in range(rows):
            for j in range(cols):
                for k in range(3):
                    encrypted_img[i][j][k] = key[int(img[i][j][k])]

        return Image.fromarray(encrypted_img.astype(np.uint8))


    def decryptImage_frame1(self, F):
        F.destroy()
        d_F2 = Frame(root)
        label1 = Label(d_F2, text='Select Image to decrypt: ')
        label1.config(font=('Times new roman', 25, 'bold'), bg='#e3f4f1')
        label1.grid()
        button_bws = Button(d_F2, text='Select', command=lambda: [self.decryptImage(d_F2),EncProj.back(self,d_F2)])
        button_bws.config(font=('Helvetica', 18), bg='#e8c1c7')
        button_bws.grid()
        button_back = Button(d_F2, text='Cancel', command=lambda: self.back(d_F2))
        button_back.config(font=('Helvetica', 18), bg='#e8c1c7')
        button_back.grid(pady=15)
        button_back.grid()
        d_F2.grid()

    def decryptImage(self, F):
        F.destroy()
        myfiles = tkinter.filedialog.askopenfilename(filetypes=[('png', '*.png'), ('jpeg', '*.jpeg'), ('jpg', '*.jpg'), ('All Files', '*.*')])
        if not myfiles:
            messagebox.showerror("Error", "You have selected nothing!")
        else:
            my_img = Image.open(myfiles)
            decrypted_img = self.decryptImageFunc(my_img)
            decrypted_img.show()
            decrypted_img.save(tkinter.filedialog.asksaveasfilename(filetypes=[('png', '*.png')], defaultextension=".png"))
            messagebox.showinfo("Success", "Decryption Successful\nDecrypted image is saved")

    def decryptImageFunc(self, image):
        img = np.array(image)
        rows, cols, _ = img.shape
        decrypted_img = np.zeros((rows, cols, 3), dtype=int)

        for i in range(rows):
            for j in range(cols):
                for k in range(3):
                    pixel_value = int(img[i][j][k])
                    if pixel_value < len(key):
                        decrypted_img[i][j][k] = key.index(pixel_value)
                    else:
                        decrypted_img[i][j][k] = pixel_value

        return Image.fromarray(decrypted_img.astype(np.uint8))


    #for audio
    def encryptAudio_frame1(self, F):
        F.destroy()
        ae_F2 = Frame(root)
        label1 = Label(ae_F2, text='Select the Audio for encryption:')
        label1.config(font=('Times new roman', 25, 'bold'), bg='#e3f4f1')
        label1.grid()

        button_bws = Button(ae_F2, text='Select', command=lambda: [self.encryptAudio(ae_F2),EncProj.back(self,ae_F2)])
        button_bws.config(font=('Helvetica', 18), bg='#e8c1c7')
        button_bws.grid()
        button_back = Button(ae_F2, text='Cancel', command=lambda: self.back(ae_F2))
        button_back.config(font=('Helvetica', 18), bg='#e8c1c7')
        button_back.grid(pady=15)
        button_back.grid()
        ae_F2.grid()
        # encode_button = Button(e_pg, text='Encode', command=lambda : [self.enc_fun(text_a,my_img),)
        
    
    def encryptAudio(self, F):
        F.destroy()
        F.destroy()
        myfile = tkinter.filedialog.askopenfilename(filetypes=[('WAV', '*.wav'), ('All Files', '*.*')])
        if not myfile:
            tkinter.messagebox.showerror("Error", "You have selected nothing!")
        else:
            # encrypted_audio_filename = self.encryptAudioFunc(myfile)
            self.encryptAudioFunc(myfile)
            tkinter.messagebox.showinfo("Success", "Encryption Successful\nEncrypted audio is saved as encrypted_audio.wav in the same directory")


    def encryptAudioFunc(self, filename):
    # Create an instance of AudioCrypt with a password
        audio_crypt = AudioCrypt(password)

        # Call the encrypt method with the audio file
        samplerate, encrypted_data = audio_crypt.encrypt(filename)

        # Now you can use 'samplerate' and 'encrypted_data' as needed
        # For example, you can save the encrypted data to a new file.
        encrypted_filename = 'encrypted_audio.wav'
        wavfile.write(encrypted_filename, samplerate, np.array(encrypted_data))
        print(f'Encrypted audio saved as {encrypted_filename}')
        
    def decryptAudio_frame1(self, F):
        F.destroy()
        ad_F2 = Frame(root)
        label1 = Label(ad_F2, text='Select Audio for decryption:')
        label1.config(font=('Times new roman', 25, 'bold'), bg='#e3f4f1')
        label1.grid()
        button_bws = Button(ad_F2, text='Select', command=lambda: [self.decryptAudio(ad_F2),EncProj.back(self,ad_F2)])
        button_bws.config(font=('Helvetica', 18), bg='#e8c1c7')
        button_bws.grid()
        button_back = Button(ad_F2, text='Cancel', command=lambda: self.back(ad_F2))
        button_back.config(font=('Helvetica', 18), bg='#e8c1c7')
        button_back.grid(pady=15)
        button_back.grid()
        ad_F2.grid()

    def decryptAudio(self, F):
        F.destroy()
        F.destroy()
        myfile = tkinter.filedialog.askopenfilename(filetypes=[('WAV', '*.wav'), ('All Files', '*.*')])
        if not myfile:
            tkinter.messagebox.showerror("Error", "You have selected nothing!")
        else:
            # decrypted_audio_filename = self.decryptAudioFunc(myfile)
            self.decryptAudioFunc(myfile)
            tkinter.messagebox.showinfo("Success", "Decryption Successful\nDecrypted audio is saved as decrypted_audio.wav in the same directory")

    def decryptAudioFunc(self, filename):
        audio_crypt = AudioCrypt(password)

        # Call the encrypt method with the audio file
        samplerate, decrypted_data = audio_crypt.decrypt(filename)

        # Now you can use 'samplerate' and 'encrypted_data' as needed
        # For example, you can save the encrypted data to a new file.
        decrypted_filename = 'decrypted_audio.wav'
        wavfile.write(decrypted_filename, samplerate, np.array(decrypted_data))
        print(f'decrypted audio saved as {decrypted_filename}')



    #frame for encode page
    def encode_frame1(self,F):
        F.destroy()
        F2 = Frame(root)
        label1= Label(F2,text='Select the Image in which \nyou want to hide text :')
        label1.config(font=('Times new roman',25, 'bold'),bg = '#e3f4f1')
        label1.grid()

        button_bws = Button(F2,text='Select',command=lambda : self.encode_frame2(F2))
        button_bws.config(font=('Helvetica',18), bg='#e8c1c7')
        button_bws.grid()
        button_back = Button(F2, text='Cancel', command=lambda : EncProj.back(self,F2))
        button_back.config(font=('Helvetica',18),bg='#e8c1c7')
        button_back.grid(pady=15)
        button_back.grid()
        F2.grid()


    #function to encode image 
    def encode_frame2(self,e_F2):
        e_pg= Frame(root)
        myfile = tkinter.filedialog.askopenfilename(filetypes = ([('png', '*.png'),('jpeg', '*.jpeg'),('jpg', '*.jpg'),('All Files', '*.*')]))
        if not myfile:
            messagebox.showerror("Error","You have selected nothing !")
        else:
            my_img = Image.open(myfile)
            new_image = my_img.resize((300,200))
            img = ImageTk.PhotoImage(new_image)
            label3= Label(e_pg,text='Selected Image')
            label3.config(font=('Helvetica',14,'bold'))
            label3.grid()
            board = Label(e_pg, image=img)
            board.image = img
            self.output_image_size = os.stat(myfile)
            self.o_image_w, self.o_image_h = my_img.size
            board.grid()
            label2 = Label(e_pg, text='Enter the message')
            label2.config(font=('Helvetica',14,'bold'))
            label2.grid(pady=15)
            text_a = Text(e_pg, width=50, height=8)
            text_a.grid()
            button_back = Button(e_pg, text='Cancel', command=lambda : EncProj.back(self,e_pg))
            button_back.config(font=('Helvetica',14), bg='#e8c1c7')
            data = text_a.get("1.0", "end-1c")
            encode_button = Button(e_pg, text='Encode', command=lambda : [self.enc_fun(text_a,my_img),EncProj.back(self,e_pg)])
            encode_button.config(font=('Helvetica',14), bg='#e8c1c7')
            encode_button.grid(pady=15)
            button_back.grid()
            e_pg.grid(row=1)
            e_F2.destroy()
    
    # - function to enter hidden text
    def enc_fun(self,text_a,myImg):
        data = text_a.get("1.0", "end-1c")
        if (len(data) == 0):
            messagebox.showinfo("Alert","Kindly enter text in TextBox")
        else:
            newImg = myImg.copy()
            self.encode_enc(newImg, data)
            my_file = BytesIO()
            temp=os.path.splitext(os.path.basename(myImg.filename))[0]
            newImg.save(tkinter.filedialog.asksaveasfilename(initialfile=temp,filetypes = ([('png', '*.png')]),defaultextension=".png"))
            self.d_image_size = my_file.tell()
            self.d_image_w,self.d_image_h = newImg.size
            messagebox.showinfo("Success","Encoding Successful\nFile is saved as Image_with_hiddentext.png in the same directory")
        
    # - function to enter the data pixels in image
    def encode_enc(self,newImg, data):
        w = newImg.size[0]
        (x, y) = (0, 0)

        for pixel in self.modify_Pix(newImg.getdata(), data):

            # Putting modified pixels in the new image
            newImg.putpixel((x, y), pixel)
            if (x == w - 1):
                x = 0
                y += 1
            else:
                x += 1

    #function to modify the pixels of image
    def modify_Pix(self,pix, data):
        dataList = self.generate_Data(data)
        dataLen = len(dataList)
        imgData = iter(pix)
        for i in range(dataLen):
            # Extracting 3 pixels at a time
            pix = [value for value in imgData.__next__()[:3] +
                   imgData.__next__()[:3] +
                   imgData.__next__()[:3]]
            
            for j in range(0, 8):
                if (dataList[i][j] == '0') and (pix[j] % 2 != 0):
                    if (pix[j] % 2 != 0):
                        pix[j] -= 1

                elif (dataList[i][j] == '1') and (pix[j] % 2 == 0):
                    pix[j] -= 1
            
            if (i == dataLen - 1):
                if (pix[-1] % 2 == 0):
                    pix[-1] -= 1
            else:
                if (pix[-1] % 2 != 0):
                    pix[-1] -= 1

            pix = tuple(pix)
            yield pix[0:3]
            yield pix[3:6]
            yield pix[6:9]


    #frame for decode page
    def decode_frame1(self,F):
        F.destroy()
        d_f2 = Frame(root)
        label1 = Label(d_f2, text='Select Image with Hidden text:')
        label1.config(font=('Times new roman',25,'bold'),bg = '#e3f4f1')
        label1.grid()
        label1.config(bg = '#e3f4f1')
        button_bws = Button(d_f2, text='Select', command=lambda :self.decode_frame2(d_f2))
        button_bws.config(font=('Helvetica',18), bg='#e8c1c7')
        button_bws.grid()
        button_back = Button(d_f2, text='Cancel', command=lambda : EncProj.back(self,d_f2))
        button_back.config(font=('Helvetica',18), bg='#e8c1c7')
        button_back.grid(pady=15)
        button_back.grid()
        d_f2.grid()


    #function to decode image 
    def decode_frame2(self,d_F2):
        d_F3 = Frame(root)
        myfiles = tkinter.filedialog.askopenfilename(filetypes = ([('png', '*.png'),('jpeg', '*.jpeg'),('jpg', '*.jpg'),('All Files', '*.*')]))
        if not myfiles:
            messagebox.showerror("Error","You have selected nothing! ")
        else:
            my_img = Image.open(myfiles, 'r')
            my_image = my_img.resize((300, 200))
            img = ImageTk.PhotoImage(my_image)
            label4= Label(d_F3,text='Selected Image :')
            label4.config(font=('Helvetica',14,'bold'))
            label4.grid()
            board = Label(d_F3, image=img)
            board.image = img
            board.grid()
            hidden_data = self.decode(my_img)
            label2 = Label(d_F3, text='Hidden data is :')
            label2.config(font=('Helvetica',14,'bold'))
            label2.grid(pady=10)
            text_a = Text(d_F3, width=50, height=10)
            text_a.insert(INSERT, hidden_data)
            text_a.configure(state='disabled')
            text_a.grid()
            button_back = Button(d_F3, text='Cancel', command= lambda :self.frame_3(d_F3))
            button_back.config(font=('Helvetica',14),bg='#e8c1c7')
            button_back.grid(pady=15)
            button_back.grid()
            d_F3.grid(row=1)
            d_F2.destroy()

    #function to decode data
    def decode(self, image):
        image_data = iter(image.getdata())
        data = ''

        while (True):
            pixels = [value for value in image_data.__next__()[:3] +
                      image_data.__next__()[:3] +
                      image_data.__next__()[:3]]
            binary_str = ''
            for i in pixels[:8]:
                if i % 2 == 0:
                    binary_str += '0'
                else:
                    binary_str += '1'

            data += chr(int(binary_str, 2))
            if pixels[-1] % 2 != 0:
                return data

    #function to generate data
    def generate_Data(self,data):
        new_data = []

        for i in data:
            new_data.append(format(ord(i), '08b'))
        return new_data


    def frame_3(self,frame):
        frame.destroy()
        self.main(root)


#GUI loop
root = Tk()
o = EncProj()
o.main(root)
root.mainloop()
